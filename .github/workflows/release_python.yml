name: Python

on:
  push:
  pull_request:

jobs:
  linux:
    defaults:
      run:
        working-directory: wheel-metadata-injector
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [x86_64]
        python-version: [ "3.12"]
    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Set up Python
      run: uv python install
    
    - name: Set up build deps
      run: uv pip install pip wheel setuptools

    - name: Build wheels
      uses: PyO3/maturin-action@v1
      with:
        target: ${{ matrix.target }}
        manylinux: auto
        args: --release --out dist -m Cargo.toml
        working-directory: wheel-metadata-injector
    - name: Install built wheel
      if: matrix.target == 'x86_64'
      run: |
        uv pip install --no-deps --force-reinstall dist/*.whl
        uv run python -c "import wheel_metadata_injector"
    - name: Upload wheels
      uses: actions/upload-artifact@v4
      with:
        name: wheels
        path: dist

  release:
    name: Release
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/tags/') }}
    needs: [ linux ]
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: wheels
      - uses: actions/setup-python@v4
        with:
          python-version: 3.9
      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          pip install --upgrade twine
          twine upload --skip-existing *